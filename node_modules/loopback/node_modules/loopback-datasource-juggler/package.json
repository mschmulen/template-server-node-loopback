{
  "name": "loopback-datasource-juggler",
  "version": "1.0.0-1",
  "description": "LoopBack DataSoure Juggler",
  "keywords": [
    "StrongLoop",
    "LoopBack",
    "DataSource",
    "Juggler",
    "ORM"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-datasource-juggler"
  },
  "main": "index.js",
  "scripts": {
    "coverage": "mocha -r blanket -R html-cov > coverage_loopback-datasource-juggler.html",
    "test": "make test"
  },
  "engines": [
    "node >= 0.6"
  ],
  "devDependencies": {
    "blanket": "~1.1.5",
    "should": "~1.2.2",
    "mocha": "~1.12.1"
  },
  "dependencies": {
    "async": "~0.2.9",
    "inflection": "~1.2.6",
    "traverse": "~0.6.5"
  },
  "license": "MIT",
  "supported": true,
  "readme": "# LoopBack DataSource Juggler\n\nLoopBack DataSource Juggler is an ORM that provides a common set of interfaces for interacting with databases, REST APIs,\nand other data sources. It was initially forked from [JugglingDB](https://github.com/1602/jugglingdb).\n\n## Overview\n\nLoopBack DataSource Juggler consists of the following components:\n\n* LoopBack Definition Language\n* DataSource\n* Connector\n\n![loopback-datasource-juggler-overview](docs/overview.png \"LoopBack Diagram\")\n\n## LoopBack Definition Language\n\nTo define model dataSource have single method `dataSource.define`. It accepts three\narguments:\n\n* **model name**:\n  String name in camel-case with first upper-case letter. This name will be used\n  later to access model.\n* **properties**:\n  Object with property type definitions. Key is property name, value is type\n  definition. Type definition can be function representing type of property\n  (String, Number, Date, Boolean), or object with {type: String|Number|...,\n  index: true|false} format.\n* **settings**:\n  Object with model-wide settings such as `tableName` or so.\n\nExamples of model definition:\n\n    var User = dataSource.define('User', {\n        email: String,\n        password: String,\n        birthDate: Date,\n        activated: Boolean\n    });\n\n    var User = dataSource.define('User', {\n        email: { type: String, limit: 150, index: true },\n        password: { type: String, limit: 50 },\n        birthDate: Date,\n        registrationDate: {\n            type: Date,\n            default: function () { return new Date }\n        },\n        activated: { type: Boolean, default: false }\n    }, {\n        tableName: 'users'\n    });\n\n## DataSource\n\nDataSource is a factory for model classes. DataSource connected with specific database or other\nbackend system using connector.\n\nAll model classes within single datasource shares same connector type and one database\nconnection. But it's possible to use more than one datasource to connect with\ndifferent databases.\n\n### Creating dataSource\n\n`DataSource` constructor available on `loopback-datasource-juggler` module:\n\n    var DataSource = require('loopback-datasource-juggler').DataSource;\n\nDataSource constructor accepts two arguments. First argument is connector. It could be\nconnector name or connector package:\n\n    var dataSourceByConnectorName = new DataSource('memory');\n    var dataSourceByConnectorModule = new DataSource(require('redis'));\n\n### Settings\n\nSecond argument is optional settings. Settings object format and defaults\ndepends on specific connector, but common fields are:\n\n* `host`: Database host\n* `port`: Database port\n* `username`: Username to connect to database\n* `password`: Password to connect to database\n* `database`: Database name\n* `debug`: Turn on verbose mode to debug db queries and lifecycle\n\nFor connector-specific settings refer to connector's readme file.\n\n## LoopBack Connectors\n\n|    Type   | Package Name                                                                           |\n| --------- |:--------------------------------------------------------------------------------------:|\n| MongoDB   | [loopback-connector-mongodb](https://github.com/strongloop/loopback-connector-mongodb) |\n| Oracle    | [loopback-connector-oracle](https://github.com/strongloop/loopback-connector-oracle)   |\n| MySQL     | [loopback-connector-mysql](https://github.com/strongloop/loopback-connector-mysql)     |\n\n\nLoopBack connectors provide access to backend systems including databases, REST APIs\nand other services. Connectors are not used directly by application code. We create\na DataSource to interact with the connector.\n\nFor example,\n\n    var DataSource = require('loopback-datasource-juggler').DataSource;\n    var oracleConnector = require('loopback-connector-oracle');\n\n    var ds = new DataSource(oracleConnector, {\n        host : '127.0.0.1',\n        database : 'XE',\n        username : 'strongloop',\n        password : 'password',\n        debug : true\n    });\n\nThe connector argument passed the DataSource constructor can be one of the following:\n\n* The connector module from `require(connectorName)`\n* The full name of the connector module, such as 'loopback-connector-oracle'\n* The short name of the connector module, such as 'oracle', which will be converted to 'loopback-connector-<shortName>'\n* A local module under ./connectors/<connectorName> folder\n\n\n## Installation\n\n    npm install loopback-datasource-juggler\n\nAlso install the appropriated connector, for example for mongodb:\n\n    npm install loopback-connector-mongodb\n\ncheck following list of available connectors\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-datasource-juggler/issues"
  },
  "_id": "loopback-datasource-juggler@1.0.0-1",
  "_from": "loopback-datasource-juggler@~1.0.0"
}
